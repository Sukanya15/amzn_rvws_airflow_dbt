
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'dbt_etl'
version: '1.0.0'

# This setting configures which "profile" dbt uses for this project.
profile: 'dbt_etl'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"


# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/
# directory as views. These settings can be overridden in the individual model
# files using the `{{ config(...) }}` macro.
models:
  dbt_etl:
    # Config indicated by + and applies to all files under models/example/
    example:
      +materialized: view
    marts:
      materialized: table # Dimension tables as tables
      # Configure specific dimension tables for Great Expectations integration
      +schema: "public" # Or your desired schema for the dimension tables

      fact_review: # Override for specific model
        materialized: incremental
        # Define a unique key for merges/updates.
        # review_sk is ideal as it's the PK.
        # If your review_sk isn't truly unique on updates (e.g. if the source data can change a review),
        # consider a composite key like reviewer_id, product_id, review_timestamp
        unique_key: review_sk
        # Handle schema changes for incremental models
        on_schema_change: 'fail' 

